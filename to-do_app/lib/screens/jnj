// ignore_for_file: avoid_print

import 'package:flutter/material.dart';
import 'package:to_do_with_database/components/card_widget.dart';
import 'package:to_do_with_database/model/to_do_model.dart';
import 'package:to_do_with_database/services/supabase_methods.dart';

import '../components/add_button.dart';
import '../components/refresh_button.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({
    super.key,
  });

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  SupabaseMethods supabaseMethods = SupabaseMethods();
  TextEditingController titleController = TextEditingController(),
      descriptionController = TextEditingController();

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: RefreshButton(
          refresh: () {
            setState(() {});
          },
        ),
        actions: [
          AddButton(
            controller1: titleController,
            controller2: descriptionController,
          ),
          const SizedBox(
            width: 15,
          ),
        ],
      ),
      body: Center(
        child: Column(
          children: [
            FutureBuilder(
                future: supabaseMethods.getToDo(),
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          CircularProgressIndicator(),
                        ],
                      );
                    } else {
                      final List<ToDoModel> list = snapshot.data!;
                      return ListView.builder(
                        shrinkWrap: true,
                        itemCount: list.length,
                        itemBuilder: ((context, index) {
                          return Padding(
                            padding: const EdgeInsets.all(10),
                            child: SizedBox(
                              height: 75,
                              child: CardWidget(
                                textEntry1: list[index].title.toString(),
                                textEntry2: list[index].description.toString(),
                                deleteAction: () {
                                  supabaseMethods.deleteToDo(
                                      id: list[index].id!.toInt());
                                  context
                                      .findAncestorStateOfType<
                                          _HomeScreenState>()!
                                      .setState(() {});
                                },
                              ),
                            ),
                          );
                        }),
                      );
                    }
                  } else {
                    if (snapshot.hasError) {
                      print(snapshot.hasError.toString());
                      return Center(child: Text(snapshot.hasError.toString()));
                    }
                    return const Center(
                      child: Text("no tasks added add your first task now!"),
                    );
                  }
                }),
          ],
        ),
      ),
    );
  }
}
